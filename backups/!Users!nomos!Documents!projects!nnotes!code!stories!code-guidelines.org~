#+OPTIONS: html-link-use-abs-url:nil html-postamble:auto html-preamble:t
#+OPTIONS: html-scripts:t html-style:t html5-fancy:nil tex:t ^:nil
#+CREATOR: <a href="http://www.gnu.org/software/emacs/">Emacs</a> 24.4.1 (<a href="http://orgmode.org">Org</a> mode 8.2.10)
#+HTML_CONTAINER: div
#+HTML_DOCTYPE: xhtml-strict
#+HTML_HEAD:
#+HTML_HEAD_EXTRA:
#+HTML_LINK_HOME:
#+HTML_LINK_UP:
#+HTML_MATHJAX:
#+INFOJS_OPT:
#+LATEX_HEADER:
#+TITLE: Coding style



* Header

  name: coding_style
  uuid: 0a98950d-736a-4ecc-9cc9-07d766611f8d
  version: 2.0.0
  contributors:
      - full_name: Pierre-Henry Fr√∂hring
        email: pierrehenry.frohring@openmailbox.org




* Coding style

  - Team _expects_ that when something has to change in the code, the
    consequence should not be to rewrite everything from scratch but just a few
    lines without threathening the correctness of the whole code.

   - Contribution policy: [[file:common-code-construction.org][common_code_construction_contract]]



* Definitions

  - The key words *MUST*, *MUST NOT*, *REQUIRED*, *SHALL*, *SHALL NOT*,
    *SHOULD*, *SHOULD NOT*, *RECOMMENDED*, *MAY*, and *OPTIONAL* in this
    document are to be interpreted as described in [[http://tools.ietf.org/html/rfc2119][RFC 2119]]

  - <<conway-law>>: http://en.wikipedia.org/wiki/Conway%27s_law

  - <<cognitive-bias>>: http://fr.wikipedia.org/wiki/Biais_cognitif

  - <<proof>> [[http://research.microsoft.com/en-us/um/people/lamport/pubs/proof.pdf][Leslie Lamport on writing a proof]]

  - <<lamport-state-machine>> [[https://www.youtube.com/watch?v%3D-4Yp3j_jk8Q][thinking for programmers]]

  - <<google-js>> [[https://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml][Google coding style]]

  - <<crock-js>> [[http://www.amazon.com/exec/obidos/ASIN/0596517742/wrrrldwideweb][JS the good parts]]

  - <<class>> [[file:class-template.js][Class template]]

  - <<problem-template>> [[file:problem.org][Problem template]]

  - <<PROBLEM>> PROBLEM: a file following the [[problem-template][Problem template]]

  - <<package>> [[http://docs.meteor.com/#/full/packagejs][Meteor package]]

  - <<semver>> [[http://semver.org/][Semantic versioning]]

  - <<frp>> [[https://gist.github.com/staltz/868e7e9bc2a7b8c1f754][FRP]]

  - <<meteor>> [[https://www.meteor.com/][Meteor]]



* Solution

  - The language for all names and comments *SHALL* be English.

  - <<unitOfWork>> A unit of work is:
      - a [[meteor][meteor application]] that uses functionalities implemented as one or more [[package][meteor packages]].
          - Each meteor package:
              - *MUST* be at most one level deep.

              - <<pb>>: *MUST* contain a [[PROBLEM][PROBLEM]]

              - *MAY* contain one [[class][classes]] that is considered a solution to the [[pb][problem]]

              - *MUST NOT* contain anything else.

  - <<NamingRules>> Naming rules:
      - Short words that are simple, clear, and obvious to the reader...

      - ...NOT invented words or acronyms.

      - =functionNamesLikeThis= begin by a verb. Ex: =destroy=, =insert=,
        =lookup=, =build=, =isReady=, =isEmpty=.

      - =variableNamesLikeThis= and made only out of nouns. Ex: =color=,
        =status=.

      - =TypeNamesLikeThis=

      - =EnumNamesLikeThis=

      - =CONSTANT_VALUES_LIKE_THIS=

      - =foo.namespaceNamesLikeThis.bar=

      - =file-names-like-this.js=



** Javascript

   - [[NamingRules][Naming rules]] *MUST* be followed.

   - JavaScript code *SHALL* be executed in strict mode.

   - All variables *SHALL* be declared at the top of functions.

   - =new= keyword *SHOULD NOT* be used.

   - Instructions *SHALL* be finished by =;= wherever possible.

   - The return value expression *MUST* start on the same line as the return
     keyword.

   - You *MUST NOT* use =with= keyword.

   - You *MUST NOT* use =eval= keyword.

   - You *SHOULD* use ~===~ instead of  ~==~; ~!==~ instead of ~!=~.

   - You *MUST NOT* make circular reference (<=> memory leak) using closures
     #+NAME: closure_memory_leak
     #+BEGIN_SRC js
       /** Because function onclick is defined in the scope of foo then it keeps a
        ,*  reference to `element`, `a` and `b`.
        ,*
        ,*  We end up with: element -> onclick -> function -> (element, a, b) We have a
        ,*  cycle: element -> ... -> element that will not be garbage collected: memory
        ,*  leak, slow code.
        ,*/
       function foo(element, a, b) {
           element.onclick = function() { /* uses a and b */ };
       }

       /** Better do: */
       function bar(a,b) { return function() { /* uses a and b */ }; }
       function foo(element, a, b) { element.onclick = bar(a, b); }
     #+END_SRC

   - You *MUST NOT* modify prototypes of builtin objects.

   - If a method is longer than a line or two and makes use of =this=, then you
     *MUST* begin with =var self = this=, and always use =self=, never =this=.

   - You *MUST* use =null= and *MUST NOT* use =undefined= to signify the absence of
     something or any valid value.

   - Indentation *SHALL* be 4 spaces per level. Tab characters *SHALL NOT* be used
     in code.

   - Code lines of more than 80 characters *SHOULD* be folded.

   - Comments *MUST* follow the [[class][class]] example, where:
       - =uid= is defined as: given a ~uuid := 68de7f67-dfa8-4db9-9287-a1242b0bddba~, then ~uid := dfa8~.

       - =(def <uid>) <definition>= binds the =<uid>= to the definition =<definition>=.

       - =(ref <uid>)= references a =<uid>=.

       - =(todo (def <uid>)) <definition>=; means that this =<definition>= is to be
                                            implemented.

       - =(fixme <uid>) <definition>=; defines a problem to solve.

       - =(block (def <uid>)) <definition>=; =<definition>= is implemented as a block of lines to be defined.
           - =(begin (ref <uid>))=; defines the beginning of the implementation.

           - =(end (ref <uid>))=; defines the end of the implementation.

   - If a version number is needed, it *MUST* follow the [[semver][semantic versioning]] convention.
