* Problem template

  - NNotes team _expects_ problems to respect a template _so that_ they are
    clear, worth solving and important for NNotes to always work on a clear
    problem that is the most important.



** Context

   - Contribution policy: [[http://rfc.zeromq.org/spec:22][C4.1]]
   - Project style guide: [[https://github.com/nomosyn/js-coding-style][Coding style]]
   - short name: problem-template
   - abbreviation: <<pt>>
   - Contributors:
       - Full name: Pierre-Henry Fr√∂hring, contact: frohring.pierrehenry@gmail.com

*** Definitions

    - <<C4.1>>: [[http://rfc.zeromq.org/spec:22][C4.1]]
    - <<working-backwards>>: [[file:stories-data/all-things-distributed.working-backwards.html][All things distributed]]
    - <<conways-law>>: [[file:stories-data/wikipedia.conways-law.html][wikipedia]]
    - <<tale-of-two-bridges>>: [[file:stories-data/hintjens.tale-of-two-bridges.html][hintjens]]
    - <<crossing-the-chasm>>: [[http://www.amazon.com/Crossing-Chasm-Marketing-High-Tech-Mainstream/dp/0060517123][link to the book]]


** Init State

   - Scene: NNotes' team receives a complain from a user.  He needs to include a
     state diagram to illustrate a concept in his notes and simple text won't
     cut it.  Is it a problem worth solving?

   - Desired outcome: NNotes' team is convinced that this problem is:

       - [ ] Perfectly clear: *this* expectation by *this* user is not met.

       - [ ] Worth solving: if *this* expectation is not met, *this* user and
         all that he represents will not join NNotes or will leave.

       - [ ] Important: Among all problems *this* problem represents the biggest
         threat to NNotes.

   - Attempted approach: A discussion happens that tries to define the problem,
     tells if it worth solving and then rank it amongs all other problems. Parts
     are written down, other not.  Because problem descriptions are not written
     down it takes much discussion simply to think that we are talking about the
     same thing. Because problems that are written down do not share a common
     structure they are difficult to compare and rank. We keep talking and
     wasting time.

   - Interfering factors: Team members talk which cannot be memorized and
     improved over time (weeks, months, years).  No common definition => endless
     talking.  No common structure => hard to rank (comparing apple and oranges
     all the time).

   - Economical consequences: NNotes fail as a team and die.  Wrong problem
     solved, endless discussion instead of solving problems.



** End State

   - New approach: Problem definition follow this pattern:

       - [ ] user complaint ->
       - [ ] [[pt][problem-template]](user complaint) ->
       - [ ] [[C4.1]] discussions over it ->
       - [ ] problem is clear, important, rankable and ranked

   - Enabling factor:

       - problem comes from users complaints: not theoretical/hypothetical
         bullshit someone really suffered.

       - [[pt][problem-template]](user complaint): push the "raw" (not clear, not
         important, not rankable and not ranked) problem into a template that
         gives him a structure so that it's written down thus improvable and
         comparable to other problems.

       - [[C4.1]] discussions over it: gives the properties clear, important and
         ranked by crossing diverse POV in an efficient way.

       - problem is clear, important, rankable and ranked: NNotes team now what to do next.

   - Economic reward:

       - NNotes becomes better and better at understanding what users really
         need.

       - NNotes become better and better at choosing what to do next so that
         NNotes is always focused on doing work that addresses a clear and most
         important problem it has.

       - This process is fast compared to previous solution and transparent to
         all team members.



** Implementation

   #+BEGIN_SRC org :tangle "./problem.org"
      # This template is defined and tangled from the file: "problem-template.org"
      # See how to tangle document from an org file here: http://orgmode.org/org.html
      # PROBLEM-TEMPLATE-VERSION: 5.0.0



      ,* <Problem name>

        - <SOMEONE> _expects_ <A FEATURE TO BE IMPLEMETED> _so that_ <SOMEONE GAIN SOMEHTING>


      ,** Context

         - Version: 0.0.0

         - Contribution policy: [[http://rfc.zeromq.org/spec:22][C4.1]]

         - Project style guide: [[https://github.com/nomosyn/resources][Coding style]]

         - short name: <shortname>

         - abbreviation: <abbreviation>

         - Licensed under <license name>, see LICENCE

         - Contributors:
             - Full name: <full-name>, contact: <email>

             - ...



      ,*** Definitions

          - Where I MAY reference external resources and define concepts that will be
            used in the argumentation.
              - Ex: <<FixPoint>>: x is a [[FixPoint]] of function f means that f(x) = x.

              - Ex: <<wikipedia>>: [[http://fr.wikipedia.org/wiki/Wikip%C3%A9dia:Accueil_principal][wikipedia]]



      ,** Init State

         - Scene: <scene>
         - Attempted approach: <attempted approach>
         - Interfering factors: <Interfering factors>
         - Economical consequences: <Economical consequences>



      ,** End State

         - New approach: <New approach>
         - Enabling factor: <Enabling factors>
         - Economic reward: <Economic reward>

   #+END_SRC
